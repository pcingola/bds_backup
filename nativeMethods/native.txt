#retType	classType	methodName	argNames	argTypes	methodBody
#---
# String methods
#---
int	string	length	this	string	return (long) objThis.toString().length();
string	string	toUpper	this	string	return objThis.toString().toUpperCase();
string	string	toLower	this	string	return objThis.toString().toLowerCase();
string	string	trim	this	string	return objThis.toString().trim();
string	string	substr	this,start,end	string,int,int	String s = objThis.toString(); int start = (int) csThread.getInt("start"), end = (int) csThread.getInt("end") ; start=Math.max(0,start); end=Math.min(end,s.length()); return (start>=end? "" : s.substring(start,end));
string	string	substr	this,start	string,int	String s = objThis.toString(); int start = (int) csThread.getInt("start") ; start=Math.max(0,start); return s.substring(start);
TypeList.get(Type.STRING)	string	split	this,regex	string,string	String str = objThis.toString(); if( str.isEmpty() ) return new ArrayList<String>(); try { return array2list( str.split( csThread.getString("regex") ) ); } catch( Throwable t ) { ArrayList<String> l = new ArrayList<String>(); l.add(str); return l; }
TypeList.get(Type.STRING)	string	lines	this	string	return array2list( objThis.toString().split( "\n" ) );
bool	string	isEmpty	this	string	return objThis.toString().isEmpty();
bool	string	startsWith	this,str	string,string	return objThis.toString().startsWith( csThread.getString("str") );
bool	string	endsWith	this,str	string,string	return objThis.toString().endsWith( csThread.getString("str") );
int	string	indexOf	this,str	string,string	return (long) objThis.toString().indexOf( csThread.getString("str") );
int	string	lastIndexOf	this,str	string,string	return (long) objThis.toString().lastIndexOf( csThread.getString("str") );
string	string	replace	this,str1,str2	string,string,string	return objThis.toString().replace( csThread.getString("str1"), csThread.getString("str2") );
int	string	parseInt	this	string	return Gpr.parseLongSafe( objThis.toString().trim() );
real	string	parseReal	this	string	return Gpr.parseDoubleSafe( objThis.toString().trim() );
bool	string	parseBool	this	string	return Gpr.parseBoolSafe( objThis.toString().trim() );
string	string	replace	this,regex,repl	string,string,string	return objThis.toString().replaceAll(csThread.getString("regex"), csThread.getString("repl"));
#---
# String: File related methods
#---
string	string	baseName	this	string	return (new File(objThis.toString())).getName();
string	string	baseName	this,ext	string,string	String ext = csThread.getString("ext"); String b = (new File(objThis.toString())).getName(); if( b.endsWith(ext) ) return b.substring(0, b.length() - ext.length()); return b;
bool	string	canExec	this	string	return (new File(objThis.toString())).canExecute();
bool	string	canRead	this	string	return (new File(objThis.toString())).canRead();
bool	string	canWrite	this	string	return (new File(objThis.toString())).canWrite();
bool	string	delete	this	string	return (new File(objThis.toString())).delete();
TypeList.get(Type.STRING)	string	dir	this	string	return array2listSorted( ( new File( objThis.toString() ) ).list() );
TypeList.get(Type.STRING)	string	dir	this,regex	string,string	String regex = csThread.getString("regex"); ArrayList<String> list = new ArrayList<String>(); String files[] = new File(objThis.toString()).list(); if (files == null) return list; for (String s : files) if (s.matches(regex)) list.add(s); Collections.sort(list); return list;
string	string	dirName	this	string	try { String d = (new File(objThis.toString())).getParent(); return d != null ? d : "."; } catch (Exception e) { return ""; }
TypeList.get(Type.STRING)	string	dirPath	this	string	ArrayList<String> list = new ArrayList<String>(); File dir[] = (new File(objThis.toString())).listFiles(); if (dir == null) return list; for (File f : dir) try { list.add(f.getCanonicalPath()); } catch (Exception e) {;} Collections.sort(list); return list;
TypeList.get(Type.STRING)	string	dirPath	this,regex	string,string	String regex = csThread.getString("regex"); ArrayList<String> list = new ArrayList<String>(); File dir[] = (new File(objThis.toString())).listFiles(); if (dir == null) return list; for (File f : dir) try { String c = f.getCanonicalPath(); if(c.matches(regex)) list.add(c); } catch (Exception e) {;} Collections.sort(list); return list;
bool	string	exists	this	string	return (new File(objThis.toString())).exists();
string	string	extName	this	string	String base = objThis.toString(); int idx = base.lastIndexOf('.'); return idx >= 0 ? base.substring(idx + 1) : "";
bool	string	isDir	this	string	return (new File(objThis.toString())).isDirectory();
bool	string	isFile	this	string	return (new File(objThis.toString())).isFile();
bool	string	mkdir	this	string	return (new File(objThis.toString())).mkdirs();
string	string	path	this	string	try { return (new File(objThis.toString())).getCanonicalPath(); } catch (Exception e) { return ""; }
string	string	pathName	this	string	try { return new File(objThis.toString()).getParentFile().getCanonicalPath(); } catch (Exception e) { return ""; }
string	string	read	this	string	return Gpr.readFile(objThis.toString(), false);
TypeList.get(Type.STRING)	string	readLines	this	string	return array2list( Gpr.readFile( objThis.toString(), false ).split("\n") ); 
string	string	removeExt	this	string	String base = objThis.toString(); int idx = base.lastIndexOf('.'); return idx >= 0 ? base.substring(0, idx) : "";
string	string	removeExt	this,ext	string,string	String ext = csThread.getString("ext"); String b = objThis.toString(); if (b.endsWith(ext)) return b.substring(0, b.length() - ext.length()); return b;
bool	string	rm	this	string	return (new File(objThis.toString())).delete();
void	string	rmOnExit	this	string	csThread.rmOnExit(objThis.toString()); return objThis;
int	string	size	this	string	return (long) (new File(objThis.toString())).length();
string	string	swapExt	this,extNew	string,string	String base = objThis.toString(); String extNew = csThread.getString("extNew"); int idx = base.lastIndexOf('.'); return idx >= 0 ? base.substring(0, idx) + "." + extNew : base + "." + extNew;
string	string	swapExt	this,extOld,extNew	string,string,string	String extNew = csThread.getString("extNew"); String extOld = csThread.getString("extOld"); String b = objThis.toString(); if (b.endsWith(extOld)) return b.substring(0, b.length() - extOld.length()) + extNew; return b + extNew;
string	string	write	this,str	string,string	return Gpr.toFile(objThis.toString(), csThread.getString("str"));
#---
# String: Task related methods
#---
bool	string	isDone	this	string	String taskId = objThis.toString(); Task task = csThread.getTask(taskId); if (task == null) return false; return task.isDone();
bool	string	isDoneOk	this	string	String taskId = objThis.toString(); Task task = csThread.getTask(taskId); if (task == null) return false; return task.isDoneOk();
string	string	stdout	this	string	String taskId = objThis.toString(); Task task = csThread.getTask(taskId); if (task == null) return ""; return Gpr.readFile(task.getStdoutFile(), false);
string	string	stderr	this	string	String taskId = objThis.toString(); Task task = csThread.getTask(taskId); if (task == null) return ""; return Gpr.readFile(task.getStderrFile(), false);
int	string	exitCode	this	string	String taskId = objThis.toString(); Task task = csThread.getTask(taskId); if (task == null) return 0L; return (long) task.getExitValue();
