#-------------------------------------------------------------------------------
#
# Perform base calling on several BAM files
#
#																Pablo Cingolani
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Parameters
#-------------------------------------------------------------------------------

string genome				# Genome name
string[] bam 				# List of bam files
string out					# VCF output file

int maxVcfHeadeLen = 2000	# We expect VCF headers to be less than this many lines
int basesPerTask = 1000000	# Number of bases to assign to each task

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

#---
# Sanity check: Command line arguments
#---
if( genome.isEmpty() || (bam.size() < 1)) {
	print("Usage: baseCalling.bds -genome genome.fasta -out out.vcf -bam file_1.bam file_2.bam ... file_N.bam\n")
	exit 1
}

# Check that genome files exist
if( !genome.exists() ) {
	print("File '$genome' does not exists!\n");
	exit 1
}

# Check that each bam exists
for( string b : bam ) {
	if( ! b.exists() ) {
		print("File '$b' does not exists!\n");
		exit 1
	}
}

#-------------------------------------------------------------------------------
# Base calling
#-------------------------------------------------------------------------------

if( out <- bam ) {
	print("Base calling: Creating $out from $bam\n")
} else {
	print("Base calling: Nothing to do, file '$out' is up to date\n")
	exit 0
}

#---
# Index files
#---
# Fasta index of reference genome
string faidx = fastaIndexName(genome)
string[] chrs = fastaIndex(genome)

# Index all bam files
for( string b : bam ) bamIndex(b)

wait

#---
# Base calling
#---

# Create a list fo bam files as a single string
string bams
for( string b : bam ) bams = bams + "$b "

# Create a tmp dir
string vcfTmpDir = "$out.split"
vcfTmpDir.mkdir()

# Split each chromosome into small intervals and create one task per interval
# Invoke samtools + bcftools on each interval
print("Creating VCF file $out\n\tTmp dir   : $vcfTmpDir\n\tBAM files : $bams\n")
string[] outChrs
for( string chr : chrs ) {
	# Get chromosome length
	int len = chromoLength( faidx, chr )

	# Split chromosome into small intervals (basesPerTask bases)
	for( int start = 1 ; start < len ; start = start + basesPerTask ) {
		int end = start + basesPerTask - 1
		if( end > len )	end = len

		# VCF tmp file name (add to list)
		string outChr = "$vcfTmpDir/$chr.$start.$end.vcf"
		outChrs.add( outChr )

		# Create task 
		print("\tBase calling interval $chr:$start-$end, file $outChr\n")
		task ( outChr <- bam ) {
			sys samtools mpileup -r $chr:$start-$end -uf $genome $bams | bcftools view -vcg - > $outChr
		}
	}
}
wait	# Wait until all base calling tasks finish

#---
# Join all VCF files
#---
print("Creating output VCF file $out\n")
# Add header
string firstVcf = outChrs.head()
sys head -n $maxVcfHeadeLen $firstVcf | grep "^#" > $out

# Concatenate all VCF files
for( string outChr : outChrs ) {
	print("\tAppend $outChr\n")
	sys grep -v "^#" $outChr >> $out
}

exit 0

#-------------------------------------------------------------------------------
# Extract chromosome length from fasta index file
# Return a list of chromosomes
#-------------------------------------------------------------------------------
int chromoLength(string faidx, string chr) {
	for( string line : faidx.readLines() ) {
		string[] recs = line.split("\\t")
		if( recs[0] == chr )	{
			return recs[1].parseInt()
		}
	}

	# Not found
	return 0
}

#-------------------------------------------------------------------------------
# Index genome fasta file
# Return a list of chromosomes
#-------------------------------------------------------------------------------
string[] fastaIndex(string gen) {
	# Index fasta
	string faidx = fastaIndexName(gen)
	print("Creating index file $faidx\n")
	task( faidx <- genome ) {
		sys samtools faidx $genome
	}

	# Get a list of chromosomes
	print("Chromosomes:\n");
	string tid = sys cut -f 1 $faidx
	string[] chromos = tid.stdout().lines()

	return chromos
}

#-------------------------------------------------------------------------------
# Name of fasta index file name
#-------------------------------------------------------------------------------
string fastaIndexName(string gen) {
	return gen.dirName() + "/" + gen.baseName() + ".fai"
}

#-------------------------------------------------------------------------------
# Index a BAM file
#-------------------------------------------------------------------------------
string bamIndex(string bam) {
	string bamidx = "$bam.bai"
	print("Indexing BAM file $bam\n")
	task( bamidx <- bam ) {
		sys samtools index $bam
	}
	return bamidx
}
