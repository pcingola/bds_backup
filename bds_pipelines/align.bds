#-------------------------------------------------------------------------------
#
# Map reads to a genome using BWA
#
#
#																Pablo Cingolani
#-------------------------------------------------------------------------------

#-------------------------------------------------------------------------------
# Parameters
#-------------------------------------------------------------------------------

string fq1 							# Reads (single-end or pair-end 1)
string fq2 							# Reads pair-end 2 (empty if single end)
string genome 						# Genome name

int trimQ         = 20				# BWA's parameter for read trimming
int mapQ          = 20				# Minimum align quality (we could use '1' to filter unmapped reads or '0' if we don't want to filter anything)
int sortMem       = 1*G				# Memory used in sorting stage
int readsPerSplit = 1000000			# Split fastq files to use processing capabilities better. This should be roughly one hour of processing time in a single core.

string fastqSplit = "$HOME/snpEff/scripts/fastqSplit.pl"

#-------------------------------------------------------------------------------
# Main
#-------------------------------------------------------------------------------

#---
# Sanity check: Command line arguments
#---
if( fq1.isEmpty() || genome.isEmpty() ) {
	print("Usage: align.cld -genome genome.fasta -fq1 file1.fastq [-fq2 file2.fastq]\n")
	exit 1
}

# Check that fq1 exists
if( !fq1.exists() ) {
	print("File '$fq1' does not exists!\n");
	exit 1
}

# Check that fq2 exists
if( (!fq2.isEmpty()) && (!fq2.exists()) ) {
	print("File '$fq2' does not exists!\n");
	exit 1
}

#-------------------------------------------------------------------------------
# Map reads
#-------------------------------------------------------------------------------

bool pairEnd = !fq2.isEmpty()
string tmpDir = fq1.dirName() + "/" + baseNoExt(fq1)
string bam = tmpDir + ".bam"

#---
# Do we need to create an index? Most of the time this is already done
#---
index(genome)

#---
# Split fastq files
#---

# Split files in tmp dir
if( ! tmpDir.exists() )	tmpDir.mkdir()

string[] fq1s = splitFastq(fq1, "$tmpDir/fq1" )
string[] fq2s
if( pairEnd )	fq2s = splitFastq(fq2, "$tmpDir/fq2" )

#---
# Map each file / file pair to the genome
#---
string[] bams 

if( pairEnd ) {
	# Map each pair of fastq and get a list of sorted BAMs
	for( int i=0 ; i < fq1s.size() ; i++ ) {
		string bam = mapBwa(fq1s[i], fq2s[i], genome)
		bams.add( bam )
	}
} else {
	# Map each fastq and get a list of sorted BAMs
	for( int i=0 ; i < fq1s.size() ; i++ ) {
		string bam = mapBwa(fq1s[i], genome)
		bams.add( bam )
	}
}

wait

#---
# Merge all BAMs
#---

string inBam = ""
for( string b : bams ) inBam = inBam + " " + b
print("Merging bams : $inBam\n")
task( bam <- bams ) {
	# Merge all files and apply mapping quality filter
	sys samtools merge - $inBam | samtools view -bq $mapQ - > $bam
}

wait

# Done!
print("Done\n")
exit 0

#-------------------------------------------------------------------------------
# Get base file name and no file extentions
#-------------------------------------------------------------------------------
string baseNoExt(string file) {
	file = file.baseName()
	while( file.extName() != "" ) {
		file = file.baseName( "." + file.extName() )
	}
	return file
}

#-------------------------------------------------------------------------------
# Create genome index
#-------------------------------------------------------------------------------
bool index( string genome ) {
	# Do we need to create index?
	string index = genome +".bwt"

	task( index <- genome ) {
		sys bwa index $genome
	}
	wait

	return true
}

#-------------------------------------------------------------------------------
# Map (single end) fastq files using BWA
#-------------------------------------------------------------------------------
string mapBwa(string fq1, string genome) {
	print("Mapping $fq1 to $genome\n")
	string base1 = fq1.dirName() + "/" + fq1.baseName()
	string sai1 = base1 + ".sai"
	string bam = base1 + ".bam"
	string sortBase = base1 + ".sort"
	string sort = sortBase + ".bam"

	# Create BAM from fastq
	task( sort <- fq1 ) {
		sys bwa aln -q $trimQ $genome $fq1 > $sai1
		sys bwa samse $genome $sai1 $fq1 | samtools view -S -b - > $bam
		sys samtools sort -m $sortMem $bam $sortBase
	}

	return sort
}

#-------------------------------------------------------------------------------
# Map (pair end) fastq files using BWA
#-------------------------------------------------------------------------------
string mapBwa(string fq1, string fq2, string genome) {
	print("Mapping $fq1 and $fq2 to $genome\n")
	string base1 = fq1.dirName() + "/" + fq1.baseName()
	string base2 = fq2.dirName() + "/" + fq2.baseName()
	string sai1 = base1 + ".sai"
	string sai2 = base2 + ".sai"
	string bam = base1 + ".bam"
	string sortBase = base1 + ".sort"
	string sort = sortBase + ".bam"

	# Create BAM from fastq
	task( sort <- [fq1, fq2] ) {
		sys bwa aln -q $trimQ $genome $fq1 > $sai1
		sys bwa aln -q $trimQ $genome $fq2 > $sai2
		sys bwa sampe $genome $sai1 $sai2 $fq1 $fq2 | samtools view -S -b - > $bam
		sys samtools sort -m $sortMem $bam $sortBase
	}

	return sort
}

#-------------------------------------------------------------------------------
# Split fastq files
# Return list of files
#-------------------------------------------------------------------------------
string[] splitFastq(string fq, string prefix) {
	print("Splitting $fq\n")
	string fileList = "$prefix.list"

	# List file exists? We don't need to split 
	if( fileList <- fq ) {
		string tid = task $fastqSplit $readsPerSplit $fq $prefix 
		wait

		# Create a file listing all fastq 
		fileList.write( tid.stdout() )
	}

	return fileList.readLines()
}

